Terminals unused in grammar

    END
    CONSTANT
    NUM
    LBRACE
    RBRACE
    LPAREN
    RPAREN
    LBRACK
    RBRACK
    COMMA
    ASSIGN
    END_OF_INSTRUCTION


State 67 conflicts: 14 shift/reduce
State 98 conflicts: 14 shift/reduce
State 99 conflicts: 14 shift/reduce
State 100 conflicts: 14 shift/reduce
State 101 conflicts: 14 shift/reduce
State 102 conflicts: 14 shift/reduce
State 103 conflicts: 14 shift/reduce
State 104 conflicts: 14 shift/reduce
State 105 conflicts: 14 shift/reduce
State 106 conflicts: 14 shift/reduce
State 107 conflicts: 14 shift/reduce
State 108 conflicts: 14 shift/reduce
State 109 conflicts: 14 shift/reduce
State 110 conflicts: 14 shift/reduce
State 111 conflicts: 14 shift/reduce


Grammar

    0 $accept: program $end

    1 program: program varDecl
    2        | program fnDecl
    3        | %empty

    4 varDecl: type id ';'
    5        | type id '[' INTEGER_LITERAL ']' ';'

    6 type: INT
    7     | BOOL
    8     | VOID

    9 fnDecl: type id parameters block

   10 parameters: '(' ')'
   11           | '(' formalsList ')'

   12 formalsList: formalDecl
   13            | formalsList ',' formalDecl

   14 formalDecl: type id

   15 block: '{' declList stmtList '}'

   16 declList: declList varDecl
   17         | %empty

   18 stmtList: stmtList stmt
   19         | %empty

   20 stmt: CIN id ';'
   21     | CIN id '[' exp ']' ';'
   22     | COUT exp ';'
   23     | subscriptExpr '=' exp ';'
   24     | id '=' exp ';'
   25     | IF '(' exp ')' block
   26     | IF '(' exp ')' block ELSE block
   27     | WHILE '(' exp ')' block
   28     | RETURN exp ';'
   29     | RETURN ';'
   30     | fnCallStmt ';'

   31 exp: exp ADD exp
   32    | exp SUBSTRACT exp
   33    | exp TIMES exp
   34    | exp OVER exp
   35    | NOT exp
   36    | exp AND exp
   37    | exp OR exp
   38    | exp EQ exp
   39    | exp NEQ exp
   40    | exp LT exp
   41    | exp GT exp
   42    | exp LTE exp
   43    | exp GTE exp
   44    | exp RIGHT exp
   45    | exp LEFT exp
   46    | '-' atom
   47    | atom

   48 atom: INTEGER_LITERAL
   49     | STRING_LITERAL
   50     | TRUE
   51     | FALSE
   52     | '(' exp ')'
   53     | fnCallExpr
   54     | subscriptExpr
   55     | id

   56 fnCallExpr: id '(' ')'
   57           | id '(' actualList ')'

   58 fnCallStmt: id '(' ')'
   59           | id '(' actualList ')'

   60 actualList: exp
   61           | actualList ',' exp

   62 subscriptExpr: id '[' exp ']'

   63 id: IDENTIFIER


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 10 11 25 26 27 52 56 57 58 59
    ')' (41) 10 11 25 26 27 52 56 57 58 59
    ',' (44) 13 61
    '-' (45) 46
    ';' (59) 4 5 20 21 22 23 24 28 29 30
    '=' (61) 23 24
    '[' (91) 5 21 62
    ']' (93) 5 21 62
    '{' (123) 15
    '}' (125) 15
    error (256)
    END (258)
    INT (259) 6
    BOOL (260) 7
    VOID (261) 8
    TRUE (262) 50
    FALSE (263) 51
    IF (264) 25 26
    ELSE (265) 26
    WHILE (266) 27
    RETURN (267) 28 29
    CIN (268) 20 21
    COUT (269) 22
    IDENTIFIER (270) 63
    INTEGER_LITERAL (271) 5 48
    STRING_LITERAL (272) 49
    CONSTANT (273)
    NUM (274)
    LBRACE (275)
    RBRACE (276)
    LPAREN (277)
    RPAREN (278)
    LBRACK (279)
    RBRACK (280)
    COMMA (281)
    ASSIGN (282)
    END_OF_INSTRUCTION (283)
    ADD (284) 31
    SUBSTRACT (285) 32
    TIMES (286) 33
    OVER (287) 34
    NOT (288) 35
    AND (289) 36
    OR (290) 37
    EQ (291) 38
    NEQ (292) 39
    LT (293) 40
    GT (294) 41
    LTE (295) 42
    GTE (296) 43
    RIGHT (297) 44
    LEFT (298) 45


Nonterminals, with rules where they appear

    $accept (54)
        on left: 0
    program (55)
        on left: 1 2 3
        on right: 0 1 2
    varDecl (56)
        on left: 4 5
        on right: 1 16
    type (57)
        on left: 6 7 8
        on right: 4 5 9 14
    fnDecl (58)
        on left: 9
        on right: 2
    parameters (59)
        on left: 10 11
        on right: 9
    formalsList (60)
        on left: 12 13
        on right: 11 13
    formalDecl (61)
        on left: 14
        on right: 12 13
    block (62)
        on left: 15
        on right: 9 25 26 27
    declList (63)
        on left: 16 17
        on right: 15 16
    stmtList (64)
        on left: 18 19
        on right: 15 18
    stmt (65)
        on left: 20 21 22 23 24 25 26 27 28 29 30
        on right: 18
    exp (66)
        on left: 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47
        on right: 21 22 23 24 25 26 27 28 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 52 60 61 62
    atom (67)
        on left: 48 49 50 51 52 53 54 55
        on right: 46 47
    fnCallExpr (68)
        on left: 56 57
        on right: 53
    fnCallStmt (69)
        on left: 58 59
        on right: 30
    actualList (70)
        on left: 60 61
        on right: 57 59 61
    subscriptExpr (71)
        on left: 62
        on right: 23 54
    id (72)
        on left: 63
        on right: 4 5 9 14 20 21 24 55 56 57 58 59 62


State 0

    0 $accept: . program $end

    $default  reduce using rule 3 (program)

    program  go to state 1


State 1

    0 $accept: program . $end
    1 program: program . varDecl
    2        | program . fnDecl

    $end  shift, and go to state 2
    INT   shift, and go to state 3
    BOOL  shift, and go to state 4
    VOID  shift, and go to state 5

    varDecl  go to state 6
    type     go to state 7
    fnDecl   go to state 8


State 2

    0 $accept: program $end .

    $default  accept


State 3

    6 type: INT .

    $default  reduce using rule 6 (type)


State 4

    7 type: BOOL .

    $default  reduce using rule 7 (type)


State 5

    8 type: VOID .

    $default  reduce using rule 8 (type)


State 6

    1 program: program varDecl .

    $default  reduce using rule 1 (program)


State 7

    4 varDecl: type . id ';'
    5        | type . id '[' INTEGER_LITERAL ']' ';'
    9 fnDecl: type . id parameters block

    IDENTIFIER  shift, and go to state 9

    id  go to state 10


State 8

    2 program: program fnDecl .

    $default  reduce using rule 2 (program)


State 9

   63 id: IDENTIFIER .

    $default  reduce using rule 63 (id)


State 10

    4 varDecl: type id . ';'
    5        | type id . '[' INTEGER_LITERAL ']' ';'
    9 fnDecl: type id . parameters block

    ';'  shift, and go to state 11
    '['  shift, and go to state 12
    '('  shift, and go to state 13

    parameters  go to state 14


State 11

    4 varDecl: type id ';' .

    $default  reduce using rule 4 (varDecl)


State 12

    5 varDecl: type id '[' . INTEGER_LITERAL ']' ';'

    INTEGER_LITERAL  shift, and go to state 15


State 13

   10 parameters: '(' . ')'
   11           | '(' . formalsList ')'

    INT   shift, and go to state 3
    BOOL  shift, and go to state 4
    VOID  shift, and go to state 5
    ')'   shift, and go to state 16

    type         go to state 17
    formalsList  go to state 18
    formalDecl   go to state 19


State 14

    9 fnDecl: type id parameters . block

    '{'  shift, and go to state 20

    block  go to state 21


State 15

    5 varDecl: type id '[' INTEGER_LITERAL . ']' ';'

    ']'  shift, and go to state 22


State 16

   10 parameters: '(' ')' .

    $default  reduce using rule 10 (parameters)


State 17

   14 formalDecl: type . id

    IDENTIFIER  shift, and go to state 9

    id  go to state 23


State 18

   11 parameters: '(' formalsList . ')'
   13 formalsList: formalsList . ',' formalDecl

    ')'  shift, and go to state 24
    ','  shift, and go to state 25


State 19

   12 formalsList: formalDecl .

    $default  reduce using rule 12 (formalsList)


State 20

   15 block: '{' . declList stmtList '}'

    $default  reduce using rule 17 (declList)

    declList  go to state 26


State 21

    9 fnDecl: type id parameters block .

    $default  reduce using rule 9 (fnDecl)


State 22

    5 varDecl: type id '[' INTEGER_LITERAL ']' . ';'

    ';'  shift, and go to state 27


State 23

   14 formalDecl: type id .

    $default  reduce using rule 14 (formalDecl)


State 24

   11 parameters: '(' formalsList ')' .

    $default  reduce using rule 11 (parameters)


State 25

   13 formalsList: formalsList ',' . formalDecl

    INT   shift, and go to state 3
    BOOL  shift, and go to state 4
    VOID  shift, and go to state 5

    type        go to state 17
    formalDecl  go to state 28


State 26

   15 block: '{' declList . stmtList '}'
   16 declList: declList . varDecl

    INT   shift, and go to state 3
    BOOL  shift, and go to state 4
    VOID  shift, and go to state 5

    $default  reduce using rule 19 (stmtList)

    varDecl   go to state 29
    type      go to state 30
    stmtList  go to state 31


State 27

    5 varDecl: type id '[' INTEGER_LITERAL ']' ';' .

    $default  reduce using rule 5 (varDecl)


State 28

   13 formalsList: formalsList ',' formalDecl .

    $default  reduce using rule 13 (formalsList)


State 29

   16 declList: declList varDecl .

    $default  reduce using rule 16 (declList)


State 30

    4 varDecl: type . id ';'
    5        | type . id '[' INTEGER_LITERAL ']' ';'

    IDENTIFIER  shift, and go to state 9

    id  go to state 32


State 31

   15 block: '{' declList stmtList . '}'
   18 stmtList: stmtList . stmt

    IF          shift, and go to state 33
    WHILE       shift, and go to state 34
    RETURN      shift, and go to state 35
    CIN         shift, and go to state 36
    COUT        shift, and go to state 37
    IDENTIFIER  shift, and go to state 9
    '}'         shift, and go to state 38

    stmt           go to state 39
    fnCallStmt     go to state 40
    subscriptExpr  go to state 41
    id             go to state 42


State 32

    4 varDecl: type id . ';'
    5        | type id . '[' INTEGER_LITERAL ']' ';'

    ';'  shift, and go to state 11
    '['  shift, and go to state 12


State 33

   25 stmt: IF . '(' exp ')' block
   26     | IF . '(' exp ')' block ELSE block

    '('  shift, and go to state 43


State 34

   27 stmt: WHILE . '(' exp ')' block

    '('  shift, and go to state 44


State 35

   28 stmt: RETURN . exp ';'
   29     | RETURN . ';'

    TRUE             shift, and go to state 45
    FALSE            shift, and go to state 46
    IDENTIFIER       shift, and go to state 9
    INTEGER_LITERAL  shift, and go to state 47
    STRING_LITERAL   shift, and go to state 48
    NOT              shift, and go to state 49
    ';'              shift, and go to state 50
    '('              shift, and go to state 51
    '-'              shift, and go to state 52

    exp            go to state 53
    atom           go to state 54
    fnCallExpr     go to state 55
    subscriptExpr  go to state 56
    id             go to state 57


State 36

   20 stmt: CIN . id ';'
   21     | CIN . id '[' exp ']' ';'

    IDENTIFIER  shift, and go to state 9

    id  go to state 58


State 37

   22 stmt: COUT . exp ';'

    TRUE             shift, and go to state 45
    FALSE            shift, and go to state 46
    IDENTIFIER       shift, and go to state 9
    INTEGER_LITERAL  shift, and go to state 47
    STRING_LITERAL   shift, and go to state 48
    NOT              shift, and go to state 49
    '('              shift, and go to state 51
    '-'              shift, and go to state 52

    exp            go to state 59
    atom           go to state 54
    fnCallExpr     go to state 55
    subscriptExpr  go to state 56
    id             go to state 57


State 38

   15 block: '{' declList stmtList '}' .

    $default  reduce using rule 15 (block)


State 39

   18 stmtList: stmtList stmt .

    $default  reduce using rule 18 (stmtList)


State 40

   30 stmt: fnCallStmt . ';'

    ';'  shift, and go to state 60


State 41

   23 stmt: subscriptExpr . '=' exp ';'

    '='  shift, and go to state 61


State 42

   24 stmt: id . '=' exp ';'
   58 fnCallStmt: id . '(' ')'
   59           | id . '(' actualList ')'
   62 subscriptExpr: id . '[' exp ']'

    '['  shift, and go to state 62
    '('  shift, and go to state 63
    '='  shift, and go to state 64


State 43

   25 stmt: IF '(' . exp ')' block
   26     | IF '(' . exp ')' block ELSE block

    TRUE             shift, and go to state 45
    FALSE            shift, and go to state 46
    IDENTIFIER       shift, and go to state 9
    INTEGER_LITERAL  shift, and go to state 47
    STRING_LITERAL   shift, and go to state 48
    NOT              shift, and go to state 49
    '('              shift, and go to state 51
    '-'              shift, and go to state 52

    exp            go to state 65
    atom           go to state 54
    fnCallExpr     go to state 55
    subscriptExpr  go to state 56
    id             go to state 57


State 44

   27 stmt: WHILE '(' . exp ')' block

    TRUE             shift, and go to state 45
    FALSE            shift, and go to state 46
    IDENTIFIER       shift, and go to state 9
    INTEGER_LITERAL  shift, and go to state 47
    STRING_LITERAL   shift, and go to state 48
    NOT              shift, and go to state 49
    '('              shift, and go to state 51
    '-'              shift, and go to state 52

    exp            go to state 66
    atom           go to state 54
    fnCallExpr     go to state 55
    subscriptExpr  go to state 56
    id             go to state 57


State 45

   50 atom: TRUE .

    $default  reduce using rule 50 (atom)


State 46

   51 atom: FALSE .

    $default  reduce using rule 51 (atom)


State 47

   48 atom: INTEGER_LITERAL .

    $default  reduce using rule 48 (atom)


State 48

   49 atom: STRING_LITERAL .

    $default  reduce using rule 49 (atom)


State 49

   35 exp: NOT . exp

    TRUE             shift, and go to state 45
    FALSE            shift, and go to state 46
    IDENTIFIER       shift, and go to state 9
    INTEGER_LITERAL  shift, and go to state 47
    STRING_LITERAL   shift, and go to state 48
    NOT              shift, and go to state 49
    '('              shift, and go to state 51
    '-'              shift, and go to state 52

    exp            go to state 67
    atom           go to state 54
    fnCallExpr     go to state 55
    subscriptExpr  go to state 56
    id             go to state 57


State 50

   29 stmt: RETURN ';' .

    $default  reduce using rule 29 (stmt)


State 51

   52 atom: '(' . exp ')'

    TRUE             shift, and go to state 45
    FALSE            shift, and go to state 46
    IDENTIFIER       shift, and go to state 9
    INTEGER_LITERAL  shift, and go to state 47
    STRING_LITERAL   shift, and go to state 48
    NOT              shift, and go to state 49
    '('              shift, and go to state 51
    '-'              shift, and go to state 52

    exp            go to state 68
    atom           go to state 54
    fnCallExpr     go to state 55
    subscriptExpr  go to state 56
    id             go to state 57


State 52

   46 exp: '-' . atom

    TRUE             shift, and go to state 45
    FALSE            shift, and go to state 46
    IDENTIFIER       shift, and go to state 9
    INTEGER_LITERAL  shift, and go to state 47
    STRING_LITERAL   shift, and go to state 48
    '('              shift, and go to state 51

    atom           go to state 69
    fnCallExpr     go to state 55
    subscriptExpr  go to state 56
    id             go to state 57


State 53

   28 stmt: RETURN exp . ';'
   31 exp: exp . ADD exp
   32    | exp . SUBSTRACT exp
   33    | exp . TIMES exp
   34    | exp . OVER exp
   36    | exp . AND exp
   37    | exp . OR exp
   38    | exp . EQ exp
   39    | exp . NEQ exp
   40    | exp . LT exp
   41    | exp . GT exp
   42    | exp . LTE exp
   43    | exp . GTE exp
   44    | exp . RIGHT exp
   45    | exp . LEFT exp

    ADD        shift, and go to state 70
    SUBSTRACT  shift, and go to state 71
    TIMES      shift, and go to state 72
    OVER       shift, and go to state 73
    AND        shift, and go to state 74
    OR         shift, and go to state 75
    EQ         shift, and go to state 76
    NEQ        shift, and go to state 77
    LT         shift, and go to state 78
    GT         shift, and go to state 79
    LTE        shift, and go to state 80
    GTE        shift, and go to state 81
    RIGHT      shift, and go to state 82
    LEFT       shift, and go to state 83
    ';'        shift, and go to state 84


State 54

   47 exp: atom .

    $default  reduce using rule 47 (exp)


State 55

   53 atom: fnCallExpr .

    $default  reduce using rule 53 (atom)


State 56

   54 atom: subscriptExpr .

    $default  reduce using rule 54 (atom)


State 57

   55 atom: id .
   56 fnCallExpr: id . '(' ')'
   57           | id . '(' actualList ')'
   62 subscriptExpr: id . '[' exp ']'

    '['  shift, and go to state 62
    '('  shift, and go to state 85

    $default  reduce using rule 55 (atom)


State 58

   20 stmt: CIN id . ';'
   21     | CIN id . '[' exp ']' ';'

    ';'  shift, and go to state 86
    '['  shift, and go to state 87


State 59

   22 stmt: COUT exp . ';'
   31 exp: exp . ADD exp
   32    | exp . SUBSTRACT exp
   33    | exp . TIMES exp
   34    | exp . OVER exp
   36    | exp . AND exp
   37    | exp . OR exp
   38    | exp . EQ exp
   39    | exp . NEQ exp
   40    | exp . LT exp
   41    | exp . GT exp
   42    | exp . LTE exp
   43    | exp . GTE exp
   44    | exp . RIGHT exp
   45    | exp . LEFT exp

    ADD        shift, and go to state 70
    SUBSTRACT  shift, and go to state 71
    TIMES      shift, and go to state 72
    OVER       shift, and go to state 73
    AND        shift, and go to state 74
    OR         shift, and go to state 75
    EQ         shift, and go to state 76
    NEQ        shift, and go to state 77
    LT         shift, and go to state 78
    GT         shift, and go to state 79
    LTE        shift, and go to state 80
    GTE        shift, and go to state 81
    RIGHT      shift, and go to state 82
    LEFT       shift, and go to state 83
    ';'        shift, and go to state 88


State 60

   30 stmt: fnCallStmt ';' .

    $default  reduce using rule 30 (stmt)


State 61

   23 stmt: subscriptExpr '=' . exp ';'

    TRUE             shift, and go to state 45
    FALSE            shift, and go to state 46
    IDENTIFIER       shift, and go to state 9
    INTEGER_LITERAL  shift, and go to state 47
    STRING_LITERAL   shift, and go to state 48
    NOT              shift, and go to state 49
    '('              shift, and go to state 51
    '-'              shift, and go to state 52

    exp            go to state 89
    atom           go to state 54
    fnCallExpr     go to state 55
    subscriptExpr  go to state 56
    id             go to state 57


State 62

   62 subscriptExpr: id '[' . exp ']'

    TRUE             shift, and go to state 45
    FALSE            shift, and go to state 46
    IDENTIFIER       shift, and go to state 9
    INTEGER_LITERAL  shift, and go to state 47
    STRING_LITERAL   shift, and go to state 48
    NOT              shift, and go to state 49
    '('              shift, and go to state 51
    '-'              shift, and go to state 52

    exp            go to state 90
    atom           go to state 54
    fnCallExpr     go to state 55
    subscriptExpr  go to state 56
    id             go to state 57


State 63

   58 fnCallStmt: id '(' . ')'
   59           | id '(' . actualList ')'

    TRUE             shift, and go to state 45
    FALSE            shift, and go to state 46
    IDENTIFIER       shift, and go to state 9
    INTEGER_LITERAL  shift, and go to state 47
    STRING_LITERAL   shift, and go to state 48
    NOT              shift, and go to state 49
    '('              shift, and go to state 51
    ')'              shift, and go to state 91
    '-'              shift, and go to state 52

    exp            go to state 92
    atom           go to state 54
    fnCallExpr     go to state 55
    actualList     go to state 93
    subscriptExpr  go to state 56
    id             go to state 57


State 64

   24 stmt: id '=' . exp ';'

    TRUE             shift, and go to state 45
    FALSE            shift, and go to state 46
    IDENTIFIER       shift, and go to state 9
    INTEGER_LITERAL  shift, and go to state 47
    STRING_LITERAL   shift, and go to state 48
    NOT              shift, and go to state 49
    '('              shift, and go to state 51
    '-'              shift, and go to state 52

    exp            go to state 94
    atom           go to state 54
    fnCallExpr     go to state 55
    subscriptExpr  go to state 56
    id             go to state 57


State 65

   25 stmt: IF '(' exp . ')' block
   26     | IF '(' exp . ')' block ELSE block
   31 exp: exp . ADD exp
   32    | exp . SUBSTRACT exp
   33    | exp . TIMES exp
   34    | exp . OVER exp
   36    | exp . AND exp
   37    | exp . OR exp
   38    | exp . EQ exp
   39    | exp . NEQ exp
   40    | exp . LT exp
   41    | exp . GT exp
   42    | exp . LTE exp
   43    | exp . GTE exp
   44    | exp . RIGHT exp
   45    | exp . LEFT exp

    ADD        shift, and go to state 70
    SUBSTRACT  shift, and go to state 71
    TIMES      shift, and go to state 72
    OVER       shift, and go to state 73
    AND        shift, and go to state 74
    OR         shift, and go to state 75
    EQ         shift, and go to state 76
    NEQ        shift, and go to state 77
    LT         shift, and go to state 78
    GT         shift, and go to state 79
    LTE        shift, and go to state 80
    GTE        shift, and go to state 81
    RIGHT      shift, and go to state 82
    LEFT       shift, and go to state 83
    ')'        shift, and go to state 95


State 66

   27 stmt: WHILE '(' exp . ')' block
   31 exp: exp . ADD exp
   32    | exp . SUBSTRACT exp
   33    | exp . TIMES exp
   34    | exp . OVER exp
   36    | exp . AND exp
   37    | exp . OR exp
   38    | exp . EQ exp
   39    | exp . NEQ exp
   40    | exp . LT exp
   41    | exp . GT exp
   42    | exp . LTE exp
   43    | exp . GTE exp
   44    | exp . RIGHT exp
   45    | exp . LEFT exp

    ADD        shift, and go to state 70
    SUBSTRACT  shift, and go to state 71
    TIMES      shift, and go to state 72
    OVER       shift, and go to state 73
    AND        shift, and go to state 74
    OR         shift, and go to state 75
    EQ         shift, and go to state 76
    NEQ        shift, and go to state 77
    LT         shift, and go to state 78
    GT         shift, and go to state 79
    LTE        shift, and go to state 80
    GTE        shift, and go to state 81
    RIGHT      shift, and go to state 82
    LEFT       shift, and go to state 83
    ')'        shift, and go to state 96


State 67

   31 exp: exp . ADD exp
   32    | exp . SUBSTRACT exp
   33    | exp . TIMES exp
   34    | exp . OVER exp
   35    | NOT exp .
   36    | exp . AND exp
   37    | exp . OR exp
   38    | exp . EQ exp
   39    | exp . NEQ exp
   40    | exp . LT exp
   41    | exp . GT exp
   42    | exp . LTE exp
   43    | exp . GTE exp
   44    | exp . RIGHT exp
   45    | exp . LEFT exp

    ADD        shift, and go to state 70
    SUBSTRACT  shift, and go to state 71
    TIMES      shift, and go to state 72
    OVER       shift, and go to state 73
    AND        shift, and go to state 74
    OR         shift, and go to state 75
    EQ         shift, and go to state 76
    NEQ        shift, and go to state 77
    LT         shift, and go to state 78
    GT         shift, and go to state 79
    LTE        shift, and go to state 80
    GTE        shift, and go to state 81
    RIGHT      shift, and go to state 82
    LEFT       shift, and go to state 83

    ADD        [reduce using rule 35 (exp)]
    SUBSTRACT  [reduce using rule 35 (exp)]
    TIMES      [reduce using rule 35 (exp)]
    OVER       [reduce using rule 35 (exp)]
    AND        [reduce using rule 35 (exp)]
    OR         [reduce using rule 35 (exp)]
    EQ         [reduce using rule 35 (exp)]
    NEQ        [reduce using rule 35 (exp)]
    LT         [reduce using rule 35 (exp)]
    GT         [reduce using rule 35 (exp)]
    LTE        [reduce using rule 35 (exp)]
    GTE        [reduce using rule 35 (exp)]
    RIGHT      [reduce using rule 35 (exp)]
    LEFT       [reduce using rule 35 (exp)]
    $default   reduce using rule 35 (exp)


State 68

   31 exp: exp . ADD exp
   32    | exp . SUBSTRACT exp
   33    | exp . TIMES exp
   34    | exp . OVER exp
   36    | exp . AND exp
   37    | exp . OR exp
   38    | exp . EQ exp
   39    | exp . NEQ exp
   40    | exp . LT exp
   41    | exp . GT exp
   42    | exp . LTE exp
   43    | exp . GTE exp
   44    | exp . RIGHT exp
   45    | exp . LEFT exp
   52 atom: '(' exp . ')'

    ADD        shift, and go to state 70
    SUBSTRACT  shift, and go to state 71
    TIMES      shift, and go to state 72
    OVER       shift, and go to state 73
    AND        shift, and go to state 74
    OR         shift, and go to state 75
    EQ         shift, and go to state 76
    NEQ        shift, and go to state 77
    LT         shift, and go to state 78
    GT         shift, and go to state 79
    LTE        shift, and go to state 80
    GTE        shift, and go to state 81
    RIGHT      shift, and go to state 82
    LEFT       shift, and go to state 83
    ')'        shift, and go to state 97


State 69

   46 exp: '-' atom .

    $default  reduce using rule 46 (exp)


State 70

   31 exp: exp ADD . exp

    TRUE             shift, and go to state 45
    FALSE            shift, and go to state 46
    IDENTIFIER       shift, and go to state 9
    INTEGER_LITERAL  shift, and go to state 47
    STRING_LITERAL   shift, and go to state 48
    NOT              shift, and go to state 49
    '('              shift, and go to state 51
    '-'              shift, and go to state 52

    exp            go to state 98
    atom           go to state 54
    fnCallExpr     go to state 55
    subscriptExpr  go to state 56
    id             go to state 57


State 71

   32 exp: exp SUBSTRACT . exp

    TRUE             shift, and go to state 45
    FALSE            shift, and go to state 46
    IDENTIFIER       shift, and go to state 9
    INTEGER_LITERAL  shift, and go to state 47
    STRING_LITERAL   shift, and go to state 48
    NOT              shift, and go to state 49
    '('              shift, and go to state 51
    '-'              shift, and go to state 52

    exp            go to state 99
    atom           go to state 54
    fnCallExpr     go to state 55
    subscriptExpr  go to state 56
    id             go to state 57


State 72

   33 exp: exp TIMES . exp

    TRUE             shift, and go to state 45
    FALSE            shift, and go to state 46
    IDENTIFIER       shift, and go to state 9
    INTEGER_LITERAL  shift, and go to state 47
    STRING_LITERAL   shift, and go to state 48
    NOT              shift, and go to state 49
    '('              shift, and go to state 51
    '-'              shift, and go to state 52

    exp            go to state 100
    atom           go to state 54
    fnCallExpr     go to state 55
    subscriptExpr  go to state 56
    id             go to state 57


State 73

   34 exp: exp OVER . exp

    TRUE             shift, and go to state 45
    FALSE            shift, and go to state 46
    IDENTIFIER       shift, and go to state 9
    INTEGER_LITERAL  shift, and go to state 47
    STRING_LITERAL   shift, and go to state 48
    NOT              shift, and go to state 49
    '('              shift, and go to state 51
    '-'              shift, and go to state 52

    exp            go to state 101
    atom           go to state 54
    fnCallExpr     go to state 55
    subscriptExpr  go to state 56
    id             go to state 57


State 74

   36 exp: exp AND . exp

    TRUE             shift, and go to state 45
    FALSE            shift, and go to state 46
    IDENTIFIER       shift, and go to state 9
    INTEGER_LITERAL  shift, and go to state 47
    STRING_LITERAL   shift, and go to state 48
    NOT              shift, and go to state 49
    '('              shift, and go to state 51
    '-'              shift, and go to state 52

    exp            go to state 102
    atom           go to state 54
    fnCallExpr     go to state 55
    subscriptExpr  go to state 56
    id             go to state 57


State 75

   37 exp: exp OR . exp

    TRUE             shift, and go to state 45
    FALSE            shift, and go to state 46
    IDENTIFIER       shift, and go to state 9
    INTEGER_LITERAL  shift, and go to state 47
    STRING_LITERAL   shift, and go to state 48
    NOT              shift, and go to state 49
    '('              shift, and go to state 51
    '-'              shift, and go to state 52

    exp            go to state 103
    atom           go to state 54
    fnCallExpr     go to state 55
    subscriptExpr  go to state 56
    id             go to state 57


State 76

   38 exp: exp EQ . exp

    TRUE             shift, and go to state 45
    FALSE            shift, and go to state 46
    IDENTIFIER       shift, and go to state 9
    INTEGER_LITERAL  shift, and go to state 47
    STRING_LITERAL   shift, and go to state 48
    NOT              shift, and go to state 49
    '('              shift, and go to state 51
    '-'              shift, and go to state 52

    exp            go to state 104
    atom           go to state 54
    fnCallExpr     go to state 55
    subscriptExpr  go to state 56
    id             go to state 57


State 77

   39 exp: exp NEQ . exp

    TRUE             shift, and go to state 45
    FALSE            shift, and go to state 46
    IDENTIFIER       shift, and go to state 9
    INTEGER_LITERAL  shift, and go to state 47
    STRING_LITERAL   shift, and go to state 48
    NOT              shift, and go to state 49
    '('              shift, and go to state 51
    '-'              shift, and go to state 52

    exp            go to state 105
    atom           go to state 54
    fnCallExpr     go to state 55
    subscriptExpr  go to state 56
    id             go to state 57


State 78

   40 exp: exp LT . exp

    TRUE             shift, and go to state 45
    FALSE            shift, and go to state 46
    IDENTIFIER       shift, and go to state 9
    INTEGER_LITERAL  shift, and go to state 47
    STRING_LITERAL   shift, and go to state 48
    NOT              shift, and go to state 49
    '('              shift, and go to state 51
    '-'              shift, and go to state 52

    exp            go to state 106
    atom           go to state 54
    fnCallExpr     go to state 55
    subscriptExpr  go to state 56
    id             go to state 57


State 79

   41 exp: exp GT . exp

    TRUE             shift, and go to state 45
    FALSE            shift, and go to state 46
    IDENTIFIER       shift, and go to state 9
    INTEGER_LITERAL  shift, and go to state 47
    STRING_LITERAL   shift, and go to state 48
    NOT              shift, and go to state 49
    '('              shift, and go to state 51
    '-'              shift, and go to state 52

    exp            go to state 107
    atom           go to state 54
    fnCallExpr     go to state 55
    subscriptExpr  go to state 56
    id             go to state 57


State 80

   42 exp: exp LTE . exp

    TRUE             shift, and go to state 45
    FALSE            shift, and go to state 46
    IDENTIFIER       shift, and go to state 9
    INTEGER_LITERAL  shift, and go to state 47
    STRING_LITERAL   shift, and go to state 48
    NOT              shift, and go to state 49
    '('              shift, and go to state 51
    '-'              shift, and go to state 52

    exp            go to state 108
    atom           go to state 54
    fnCallExpr     go to state 55
    subscriptExpr  go to state 56
    id             go to state 57


State 81

   43 exp: exp GTE . exp

    TRUE             shift, and go to state 45
    FALSE            shift, and go to state 46
    IDENTIFIER       shift, and go to state 9
    INTEGER_LITERAL  shift, and go to state 47
    STRING_LITERAL   shift, and go to state 48
    NOT              shift, and go to state 49
    '('              shift, and go to state 51
    '-'              shift, and go to state 52

    exp            go to state 109
    atom           go to state 54
    fnCallExpr     go to state 55
    subscriptExpr  go to state 56
    id             go to state 57


State 82

   44 exp: exp RIGHT . exp

    TRUE             shift, and go to state 45
    FALSE            shift, and go to state 46
    IDENTIFIER       shift, and go to state 9
    INTEGER_LITERAL  shift, and go to state 47
    STRING_LITERAL   shift, and go to state 48
    NOT              shift, and go to state 49
    '('              shift, and go to state 51
    '-'              shift, and go to state 52

    exp            go to state 110
    atom           go to state 54
    fnCallExpr     go to state 55
    subscriptExpr  go to state 56
    id             go to state 57


State 83

   45 exp: exp LEFT . exp

    TRUE             shift, and go to state 45
    FALSE            shift, and go to state 46
    IDENTIFIER       shift, and go to state 9
    INTEGER_LITERAL  shift, and go to state 47
    STRING_LITERAL   shift, and go to state 48
    NOT              shift, and go to state 49
    '('              shift, and go to state 51
    '-'              shift, and go to state 52

    exp            go to state 111
    atom           go to state 54
    fnCallExpr     go to state 55
    subscriptExpr  go to state 56
    id             go to state 57


State 84

   28 stmt: RETURN exp ';' .

    $default  reduce using rule 28 (stmt)


State 85

   56 fnCallExpr: id '(' . ')'
   57           | id '(' . actualList ')'

    TRUE             shift, and go to state 45
    FALSE            shift, and go to state 46
    IDENTIFIER       shift, and go to state 9
    INTEGER_LITERAL  shift, and go to state 47
    STRING_LITERAL   shift, and go to state 48
    NOT              shift, and go to state 49
    '('              shift, and go to state 51
    ')'              shift, and go to state 112
    '-'              shift, and go to state 52

    exp            go to state 92
    atom           go to state 54
    fnCallExpr     go to state 55
    actualList     go to state 113
    subscriptExpr  go to state 56
    id             go to state 57


State 86

   20 stmt: CIN id ';' .

    $default  reduce using rule 20 (stmt)


State 87

   21 stmt: CIN id '[' . exp ']' ';'

    TRUE             shift, and go to state 45
    FALSE            shift, and go to state 46
    IDENTIFIER       shift, and go to state 9
    INTEGER_LITERAL  shift, and go to state 47
    STRING_LITERAL   shift, and go to state 48
    NOT              shift, and go to state 49
    '('              shift, and go to state 51
    '-'              shift, and go to state 52

    exp            go to state 114
    atom           go to state 54
    fnCallExpr     go to state 55
    subscriptExpr  go to state 56
    id             go to state 57


State 88

   22 stmt: COUT exp ';' .

    $default  reduce using rule 22 (stmt)


State 89

   23 stmt: subscriptExpr '=' exp . ';'
   31 exp: exp . ADD exp
   32    | exp . SUBSTRACT exp
   33    | exp . TIMES exp
   34    | exp . OVER exp
   36    | exp . AND exp
   37    | exp . OR exp
   38    | exp . EQ exp
   39    | exp . NEQ exp
   40    | exp . LT exp
   41    | exp . GT exp
   42    | exp . LTE exp
   43    | exp . GTE exp
   44    | exp . RIGHT exp
   45    | exp . LEFT exp

    ADD        shift, and go to state 70
    SUBSTRACT  shift, and go to state 71
    TIMES      shift, and go to state 72
    OVER       shift, and go to state 73
    AND        shift, and go to state 74
    OR         shift, and go to state 75
    EQ         shift, and go to state 76
    NEQ        shift, and go to state 77
    LT         shift, and go to state 78
    GT         shift, and go to state 79
    LTE        shift, and go to state 80
    GTE        shift, and go to state 81
    RIGHT      shift, and go to state 82
    LEFT       shift, and go to state 83
    ';'        shift, and go to state 115


State 90

   31 exp: exp . ADD exp
   32    | exp . SUBSTRACT exp
   33    | exp . TIMES exp
   34    | exp . OVER exp
   36    | exp . AND exp
   37    | exp . OR exp
   38    | exp . EQ exp
   39    | exp . NEQ exp
   40    | exp . LT exp
   41    | exp . GT exp
   42    | exp . LTE exp
   43    | exp . GTE exp
   44    | exp . RIGHT exp
   45    | exp . LEFT exp
   62 subscriptExpr: id '[' exp . ']'

    ADD        shift, and go to state 70
    SUBSTRACT  shift, and go to state 71
    TIMES      shift, and go to state 72
    OVER       shift, and go to state 73
    AND        shift, and go to state 74
    OR         shift, and go to state 75
    EQ         shift, and go to state 76
    NEQ        shift, and go to state 77
    LT         shift, and go to state 78
    GT         shift, and go to state 79
    LTE        shift, and go to state 80
    GTE        shift, and go to state 81
    RIGHT      shift, and go to state 82
    LEFT       shift, and go to state 83
    ']'        shift, and go to state 116


State 91

   58 fnCallStmt: id '(' ')' .

    $default  reduce using rule 58 (fnCallStmt)


State 92

   31 exp: exp . ADD exp
   32    | exp . SUBSTRACT exp
   33    | exp . TIMES exp
   34    | exp . OVER exp
   36    | exp . AND exp
   37    | exp . OR exp
   38    | exp . EQ exp
   39    | exp . NEQ exp
   40    | exp . LT exp
   41    | exp . GT exp
   42    | exp . LTE exp
   43    | exp . GTE exp
   44    | exp . RIGHT exp
   45    | exp . LEFT exp
   60 actualList: exp .

    ADD        shift, and go to state 70
    SUBSTRACT  shift, and go to state 71
    TIMES      shift, and go to state 72
    OVER       shift, and go to state 73
    AND        shift, and go to state 74
    OR         shift, and go to state 75
    EQ         shift, and go to state 76
    NEQ        shift, and go to state 77
    LT         shift, and go to state 78
    GT         shift, and go to state 79
    LTE        shift, and go to state 80
    GTE        shift, and go to state 81
    RIGHT      shift, and go to state 82
    LEFT       shift, and go to state 83

    $default  reduce using rule 60 (actualList)


State 93

   59 fnCallStmt: id '(' actualList . ')'
   61 actualList: actualList . ',' exp

    ')'  shift, and go to state 117
    ','  shift, and go to state 118


State 94

   24 stmt: id '=' exp . ';'
   31 exp: exp . ADD exp
   32    | exp . SUBSTRACT exp
   33    | exp . TIMES exp
   34    | exp . OVER exp
   36    | exp . AND exp
   37    | exp . OR exp
   38    | exp . EQ exp
   39    | exp . NEQ exp
   40    | exp . LT exp
   41    | exp . GT exp
   42    | exp . LTE exp
   43    | exp . GTE exp
   44    | exp . RIGHT exp
   45    | exp . LEFT exp

    ADD        shift, and go to state 70
    SUBSTRACT  shift, and go to state 71
    TIMES      shift, and go to state 72
    OVER       shift, and go to state 73
    AND        shift, and go to state 74
    OR         shift, and go to state 75
    EQ         shift, and go to state 76
    NEQ        shift, and go to state 77
    LT         shift, and go to state 78
    GT         shift, and go to state 79
    LTE        shift, and go to state 80
    GTE        shift, and go to state 81
    RIGHT      shift, and go to state 82
    LEFT       shift, and go to state 83
    ';'        shift, and go to state 119


State 95

   25 stmt: IF '(' exp ')' . block
   26     | IF '(' exp ')' . block ELSE block

    '{'  shift, and go to state 20

    block  go to state 120


State 96

   27 stmt: WHILE '(' exp ')' . block

    '{'  shift, and go to state 20

    block  go to state 121


State 97

   52 atom: '(' exp ')' .

    $default  reduce using rule 52 (atom)


State 98

   31 exp: exp . ADD exp
   31    | exp ADD exp .
   32    | exp . SUBSTRACT exp
   33    | exp . TIMES exp
   34    | exp . OVER exp
   36    | exp . AND exp
   37    | exp . OR exp
   38    | exp . EQ exp
   39    | exp . NEQ exp
   40    | exp . LT exp
   41    | exp . GT exp
   42    | exp . LTE exp
   43    | exp . GTE exp
   44    | exp . RIGHT exp
   45    | exp . LEFT exp

    ADD        shift, and go to state 70
    SUBSTRACT  shift, and go to state 71
    TIMES      shift, and go to state 72
    OVER       shift, and go to state 73
    AND        shift, and go to state 74
    OR         shift, and go to state 75
    EQ         shift, and go to state 76
    NEQ        shift, and go to state 77
    LT         shift, and go to state 78
    GT         shift, and go to state 79
    LTE        shift, and go to state 80
    GTE        shift, and go to state 81
    RIGHT      shift, and go to state 82
    LEFT       shift, and go to state 83

    ADD        [reduce using rule 31 (exp)]
    SUBSTRACT  [reduce using rule 31 (exp)]
    TIMES      [reduce using rule 31 (exp)]
    OVER       [reduce using rule 31 (exp)]
    AND        [reduce using rule 31 (exp)]
    OR         [reduce using rule 31 (exp)]
    EQ         [reduce using rule 31 (exp)]
    NEQ        [reduce using rule 31 (exp)]
    LT         [reduce using rule 31 (exp)]
    GT         [reduce using rule 31 (exp)]
    LTE        [reduce using rule 31 (exp)]
    GTE        [reduce using rule 31 (exp)]
    RIGHT      [reduce using rule 31 (exp)]
    LEFT       [reduce using rule 31 (exp)]
    $default   reduce using rule 31 (exp)


State 99

   31 exp: exp . ADD exp
   32    | exp . SUBSTRACT exp
   32    | exp SUBSTRACT exp .
   33    | exp . TIMES exp
   34    | exp . OVER exp
   36    | exp . AND exp
   37    | exp . OR exp
   38    | exp . EQ exp
   39    | exp . NEQ exp
   40    | exp . LT exp
   41    | exp . GT exp
   42    | exp . LTE exp
   43    | exp . GTE exp
   44    | exp . RIGHT exp
   45    | exp . LEFT exp

    ADD        shift, and go to state 70
    SUBSTRACT  shift, and go to state 71
    TIMES      shift, and go to state 72
    OVER       shift, and go to state 73
    AND        shift, and go to state 74
    OR         shift, and go to state 75
    EQ         shift, and go to state 76
    NEQ        shift, and go to state 77
    LT         shift, and go to state 78
    GT         shift, and go to state 79
    LTE        shift, and go to state 80
    GTE        shift, and go to state 81
    RIGHT      shift, and go to state 82
    LEFT       shift, and go to state 83

    ADD        [reduce using rule 32 (exp)]
    SUBSTRACT  [reduce using rule 32 (exp)]
    TIMES      [reduce using rule 32 (exp)]
    OVER       [reduce using rule 32 (exp)]
    AND        [reduce using rule 32 (exp)]
    OR         [reduce using rule 32 (exp)]
    EQ         [reduce using rule 32 (exp)]
    NEQ        [reduce using rule 32 (exp)]
    LT         [reduce using rule 32 (exp)]
    GT         [reduce using rule 32 (exp)]
    LTE        [reduce using rule 32 (exp)]
    GTE        [reduce using rule 32 (exp)]
    RIGHT      [reduce using rule 32 (exp)]
    LEFT       [reduce using rule 32 (exp)]
    $default   reduce using rule 32 (exp)


State 100

   31 exp: exp . ADD exp
   32    | exp . SUBSTRACT exp
   33    | exp . TIMES exp
   33    | exp TIMES exp .
   34    | exp . OVER exp
   36    | exp . AND exp
   37    | exp . OR exp
   38    | exp . EQ exp
   39    | exp . NEQ exp
   40    | exp . LT exp
   41    | exp . GT exp
   42    | exp . LTE exp
   43    | exp . GTE exp
   44    | exp . RIGHT exp
   45    | exp . LEFT exp

    ADD        shift, and go to state 70
    SUBSTRACT  shift, and go to state 71
    TIMES      shift, and go to state 72
    OVER       shift, and go to state 73
    AND        shift, and go to state 74
    OR         shift, and go to state 75
    EQ         shift, and go to state 76
    NEQ        shift, and go to state 77
    LT         shift, and go to state 78
    GT         shift, and go to state 79
    LTE        shift, and go to state 80
    GTE        shift, and go to state 81
    RIGHT      shift, and go to state 82
    LEFT       shift, and go to state 83

    ADD        [reduce using rule 33 (exp)]
    SUBSTRACT  [reduce using rule 33 (exp)]
    TIMES      [reduce using rule 33 (exp)]
    OVER       [reduce using rule 33 (exp)]
    AND        [reduce using rule 33 (exp)]
    OR         [reduce using rule 33 (exp)]
    EQ         [reduce using rule 33 (exp)]
    NEQ        [reduce using rule 33 (exp)]
    LT         [reduce using rule 33 (exp)]
    GT         [reduce using rule 33 (exp)]
    LTE        [reduce using rule 33 (exp)]
    GTE        [reduce using rule 33 (exp)]
    RIGHT      [reduce using rule 33 (exp)]
    LEFT       [reduce using rule 33 (exp)]
    $default   reduce using rule 33 (exp)


State 101

   31 exp: exp . ADD exp
   32    | exp . SUBSTRACT exp
   33    | exp . TIMES exp
   34    | exp . OVER exp
   34    | exp OVER exp .
   36    | exp . AND exp
   37    | exp . OR exp
   38    | exp . EQ exp
   39    | exp . NEQ exp
   40    | exp . LT exp
   41    | exp . GT exp
   42    | exp . LTE exp
   43    | exp . GTE exp
   44    | exp . RIGHT exp
   45    | exp . LEFT exp

    ADD        shift, and go to state 70
    SUBSTRACT  shift, and go to state 71
    TIMES      shift, and go to state 72
    OVER       shift, and go to state 73
    AND        shift, and go to state 74
    OR         shift, and go to state 75
    EQ         shift, and go to state 76
    NEQ        shift, and go to state 77
    LT         shift, and go to state 78
    GT         shift, and go to state 79
    LTE        shift, and go to state 80
    GTE        shift, and go to state 81
    RIGHT      shift, and go to state 82
    LEFT       shift, and go to state 83

    ADD        [reduce using rule 34 (exp)]
    SUBSTRACT  [reduce using rule 34 (exp)]
    TIMES      [reduce using rule 34 (exp)]
    OVER       [reduce using rule 34 (exp)]
    AND        [reduce using rule 34 (exp)]
    OR         [reduce using rule 34 (exp)]
    EQ         [reduce using rule 34 (exp)]
    NEQ        [reduce using rule 34 (exp)]
    LT         [reduce using rule 34 (exp)]
    GT         [reduce using rule 34 (exp)]
    LTE        [reduce using rule 34 (exp)]
    GTE        [reduce using rule 34 (exp)]
    RIGHT      [reduce using rule 34 (exp)]
    LEFT       [reduce using rule 34 (exp)]
    $default   reduce using rule 34 (exp)


State 102

   31 exp: exp . ADD exp
   32    | exp . SUBSTRACT exp
   33    | exp . TIMES exp
   34    | exp . OVER exp
   36    | exp . AND exp
   36    | exp AND exp .
   37    | exp . OR exp
   38    | exp . EQ exp
   39    | exp . NEQ exp
   40    | exp . LT exp
   41    | exp . GT exp
   42    | exp . LTE exp
   43    | exp . GTE exp
   44    | exp . RIGHT exp
   45    | exp . LEFT exp

    ADD        shift, and go to state 70
    SUBSTRACT  shift, and go to state 71
    TIMES      shift, and go to state 72
    OVER       shift, and go to state 73
    AND        shift, and go to state 74
    OR         shift, and go to state 75
    EQ         shift, and go to state 76
    NEQ        shift, and go to state 77
    LT         shift, and go to state 78
    GT         shift, and go to state 79
    LTE        shift, and go to state 80
    GTE        shift, and go to state 81
    RIGHT      shift, and go to state 82
    LEFT       shift, and go to state 83

    ADD        [reduce using rule 36 (exp)]
    SUBSTRACT  [reduce using rule 36 (exp)]
    TIMES      [reduce using rule 36 (exp)]
    OVER       [reduce using rule 36 (exp)]
    AND        [reduce using rule 36 (exp)]
    OR         [reduce using rule 36 (exp)]
    EQ         [reduce using rule 36 (exp)]
    NEQ        [reduce using rule 36 (exp)]
    LT         [reduce using rule 36 (exp)]
    GT         [reduce using rule 36 (exp)]
    LTE        [reduce using rule 36 (exp)]
    GTE        [reduce using rule 36 (exp)]
    RIGHT      [reduce using rule 36 (exp)]
    LEFT       [reduce using rule 36 (exp)]
    $default   reduce using rule 36 (exp)


State 103

   31 exp: exp . ADD exp
   32    | exp . SUBSTRACT exp
   33    | exp . TIMES exp
   34    | exp . OVER exp
   36    | exp . AND exp
   37    | exp . OR exp
   37    | exp OR exp .
   38    | exp . EQ exp
   39    | exp . NEQ exp
   40    | exp . LT exp
   41    | exp . GT exp
   42    | exp . LTE exp
   43    | exp . GTE exp
   44    | exp . RIGHT exp
   45    | exp . LEFT exp

    ADD        shift, and go to state 70
    SUBSTRACT  shift, and go to state 71
    TIMES      shift, and go to state 72
    OVER       shift, and go to state 73
    AND        shift, and go to state 74
    OR         shift, and go to state 75
    EQ         shift, and go to state 76
    NEQ        shift, and go to state 77
    LT         shift, and go to state 78
    GT         shift, and go to state 79
    LTE        shift, and go to state 80
    GTE        shift, and go to state 81
    RIGHT      shift, and go to state 82
    LEFT       shift, and go to state 83

    ADD        [reduce using rule 37 (exp)]
    SUBSTRACT  [reduce using rule 37 (exp)]
    TIMES      [reduce using rule 37 (exp)]
    OVER       [reduce using rule 37 (exp)]
    AND        [reduce using rule 37 (exp)]
    OR         [reduce using rule 37 (exp)]
    EQ         [reduce using rule 37 (exp)]
    NEQ        [reduce using rule 37 (exp)]
    LT         [reduce using rule 37 (exp)]
    GT         [reduce using rule 37 (exp)]
    LTE        [reduce using rule 37 (exp)]
    GTE        [reduce using rule 37 (exp)]
    RIGHT      [reduce using rule 37 (exp)]
    LEFT       [reduce using rule 37 (exp)]
    $default   reduce using rule 37 (exp)


State 104

   31 exp: exp . ADD exp
   32    | exp . SUBSTRACT exp
   33    | exp . TIMES exp
   34    | exp . OVER exp
   36    | exp . AND exp
   37    | exp . OR exp
   38    | exp . EQ exp
   38    | exp EQ exp .
   39    | exp . NEQ exp
   40    | exp . LT exp
   41    | exp . GT exp
   42    | exp . LTE exp
   43    | exp . GTE exp
   44    | exp . RIGHT exp
   45    | exp . LEFT exp

    ADD        shift, and go to state 70
    SUBSTRACT  shift, and go to state 71
    TIMES      shift, and go to state 72
    OVER       shift, and go to state 73
    AND        shift, and go to state 74
    OR         shift, and go to state 75
    EQ         shift, and go to state 76
    NEQ        shift, and go to state 77
    LT         shift, and go to state 78
    GT         shift, and go to state 79
    LTE        shift, and go to state 80
    GTE        shift, and go to state 81
    RIGHT      shift, and go to state 82
    LEFT       shift, and go to state 83

    ADD        [reduce using rule 38 (exp)]
    SUBSTRACT  [reduce using rule 38 (exp)]
    TIMES      [reduce using rule 38 (exp)]
    OVER       [reduce using rule 38 (exp)]
    AND        [reduce using rule 38 (exp)]
    OR         [reduce using rule 38 (exp)]
    EQ         [reduce using rule 38 (exp)]
    NEQ        [reduce using rule 38 (exp)]
    LT         [reduce using rule 38 (exp)]
    GT         [reduce using rule 38 (exp)]
    LTE        [reduce using rule 38 (exp)]
    GTE        [reduce using rule 38 (exp)]
    RIGHT      [reduce using rule 38 (exp)]
    LEFT       [reduce using rule 38 (exp)]
    $default   reduce using rule 38 (exp)


State 105

   31 exp: exp . ADD exp
   32    | exp . SUBSTRACT exp
   33    | exp . TIMES exp
   34    | exp . OVER exp
   36    | exp . AND exp
   37    | exp . OR exp
   38    | exp . EQ exp
   39    | exp . NEQ exp
   39    | exp NEQ exp .
   40    | exp . LT exp
   41    | exp . GT exp
   42    | exp . LTE exp
   43    | exp . GTE exp
   44    | exp . RIGHT exp
   45    | exp . LEFT exp

    ADD        shift, and go to state 70
    SUBSTRACT  shift, and go to state 71
    TIMES      shift, and go to state 72
    OVER       shift, and go to state 73
    AND        shift, and go to state 74
    OR         shift, and go to state 75
    EQ         shift, and go to state 76
    NEQ        shift, and go to state 77
    LT         shift, and go to state 78
    GT         shift, and go to state 79
    LTE        shift, and go to state 80
    GTE        shift, and go to state 81
    RIGHT      shift, and go to state 82
    LEFT       shift, and go to state 83

    ADD        [reduce using rule 39 (exp)]
    SUBSTRACT  [reduce using rule 39 (exp)]
    TIMES      [reduce using rule 39 (exp)]
    OVER       [reduce using rule 39 (exp)]
    AND        [reduce using rule 39 (exp)]
    OR         [reduce using rule 39 (exp)]
    EQ         [reduce using rule 39 (exp)]
    NEQ        [reduce using rule 39 (exp)]
    LT         [reduce using rule 39 (exp)]
    GT         [reduce using rule 39 (exp)]
    LTE        [reduce using rule 39 (exp)]
    GTE        [reduce using rule 39 (exp)]
    RIGHT      [reduce using rule 39 (exp)]
    LEFT       [reduce using rule 39 (exp)]
    $default   reduce using rule 39 (exp)


State 106

   31 exp: exp . ADD exp
   32    | exp . SUBSTRACT exp
   33    | exp . TIMES exp
   34    | exp . OVER exp
   36    | exp . AND exp
   37    | exp . OR exp
   38    | exp . EQ exp
   39    | exp . NEQ exp
   40    | exp . LT exp
   40    | exp LT exp .
   41    | exp . GT exp
   42    | exp . LTE exp
   43    | exp . GTE exp
   44    | exp . RIGHT exp
   45    | exp . LEFT exp

    ADD        shift, and go to state 70
    SUBSTRACT  shift, and go to state 71
    TIMES      shift, and go to state 72
    OVER       shift, and go to state 73
    AND        shift, and go to state 74
    OR         shift, and go to state 75
    EQ         shift, and go to state 76
    NEQ        shift, and go to state 77
    LT         shift, and go to state 78
    GT         shift, and go to state 79
    LTE        shift, and go to state 80
    GTE        shift, and go to state 81
    RIGHT      shift, and go to state 82
    LEFT       shift, and go to state 83

    ADD        [reduce using rule 40 (exp)]
    SUBSTRACT  [reduce using rule 40 (exp)]
    TIMES      [reduce using rule 40 (exp)]
    OVER       [reduce using rule 40 (exp)]
    AND        [reduce using rule 40 (exp)]
    OR         [reduce using rule 40 (exp)]
    EQ         [reduce using rule 40 (exp)]
    NEQ        [reduce using rule 40 (exp)]
    LT         [reduce using rule 40 (exp)]
    GT         [reduce using rule 40 (exp)]
    LTE        [reduce using rule 40 (exp)]
    GTE        [reduce using rule 40 (exp)]
    RIGHT      [reduce using rule 40 (exp)]
    LEFT       [reduce using rule 40 (exp)]
    $default   reduce using rule 40 (exp)


State 107

   31 exp: exp . ADD exp
   32    | exp . SUBSTRACT exp
   33    | exp . TIMES exp
   34    | exp . OVER exp
   36    | exp . AND exp
   37    | exp . OR exp
   38    | exp . EQ exp
   39    | exp . NEQ exp
   40    | exp . LT exp
   41    | exp . GT exp
   41    | exp GT exp .
   42    | exp . LTE exp
   43    | exp . GTE exp
   44    | exp . RIGHT exp
   45    | exp . LEFT exp

    ADD        shift, and go to state 70
    SUBSTRACT  shift, and go to state 71
    TIMES      shift, and go to state 72
    OVER       shift, and go to state 73
    AND        shift, and go to state 74
    OR         shift, and go to state 75
    EQ         shift, and go to state 76
    NEQ        shift, and go to state 77
    LT         shift, and go to state 78
    GT         shift, and go to state 79
    LTE        shift, and go to state 80
    GTE        shift, and go to state 81
    RIGHT      shift, and go to state 82
    LEFT       shift, and go to state 83

    ADD        [reduce using rule 41 (exp)]
    SUBSTRACT  [reduce using rule 41 (exp)]
    TIMES      [reduce using rule 41 (exp)]
    OVER       [reduce using rule 41 (exp)]
    AND        [reduce using rule 41 (exp)]
    OR         [reduce using rule 41 (exp)]
    EQ         [reduce using rule 41 (exp)]
    NEQ        [reduce using rule 41 (exp)]
    LT         [reduce using rule 41 (exp)]
    GT         [reduce using rule 41 (exp)]
    LTE        [reduce using rule 41 (exp)]
    GTE        [reduce using rule 41 (exp)]
    RIGHT      [reduce using rule 41 (exp)]
    LEFT       [reduce using rule 41 (exp)]
    $default   reduce using rule 41 (exp)


State 108

   31 exp: exp . ADD exp
   32    | exp . SUBSTRACT exp
   33    | exp . TIMES exp
   34    | exp . OVER exp
   36    | exp . AND exp
   37    | exp . OR exp
   38    | exp . EQ exp
   39    | exp . NEQ exp
   40    | exp . LT exp
   41    | exp . GT exp
   42    | exp . LTE exp
   42    | exp LTE exp .
   43    | exp . GTE exp
   44    | exp . RIGHT exp
   45    | exp . LEFT exp

    ADD        shift, and go to state 70
    SUBSTRACT  shift, and go to state 71
    TIMES      shift, and go to state 72
    OVER       shift, and go to state 73
    AND        shift, and go to state 74
    OR         shift, and go to state 75
    EQ         shift, and go to state 76
    NEQ        shift, and go to state 77
    LT         shift, and go to state 78
    GT         shift, and go to state 79
    LTE        shift, and go to state 80
    GTE        shift, and go to state 81
    RIGHT      shift, and go to state 82
    LEFT       shift, and go to state 83

    ADD        [reduce using rule 42 (exp)]
    SUBSTRACT  [reduce using rule 42 (exp)]
    TIMES      [reduce using rule 42 (exp)]
    OVER       [reduce using rule 42 (exp)]
    AND        [reduce using rule 42 (exp)]
    OR         [reduce using rule 42 (exp)]
    EQ         [reduce using rule 42 (exp)]
    NEQ        [reduce using rule 42 (exp)]
    LT         [reduce using rule 42 (exp)]
    GT         [reduce using rule 42 (exp)]
    LTE        [reduce using rule 42 (exp)]
    GTE        [reduce using rule 42 (exp)]
    RIGHT      [reduce using rule 42 (exp)]
    LEFT       [reduce using rule 42 (exp)]
    $default   reduce using rule 42 (exp)


State 109

   31 exp: exp . ADD exp
   32    | exp . SUBSTRACT exp
   33    | exp . TIMES exp
   34    | exp . OVER exp
   36    | exp . AND exp
   37    | exp . OR exp
   38    | exp . EQ exp
   39    | exp . NEQ exp
   40    | exp . LT exp
   41    | exp . GT exp
   42    | exp . LTE exp
   43    | exp . GTE exp
   43    | exp GTE exp .
   44    | exp . RIGHT exp
   45    | exp . LEFT exp

    ADD        shift, and go to state 70
    SUBSTRACT  shift, and go to state 71
    TIMES      shift, and go to state 72
    OVER       shift, and go to state 73
    AND        shift, and go to state 74
    OR         shift, and go to state 75
    EQ         shift, and go to state 76
    NEQ        shift, and go to state 77
    LT         shift, and go to state 78
    GT         shift, and go to state 79
    LTE        shift, and go to state 80
    GTE        shift, and go to state 81
    RIGHT      shift, and go to state 82
    LEFT       shift, and go to state 83

    ADD        [reduce using rule 43 (exp)]
    SUBSTRACT  [reduce using rule 43 (exp)]
    TIMES      [reduce using rule 43 (exp)]
    OVER       [reduce using rule 43 (exp)]
    AND        [reduce using rule 43 (exp)]
    OR         [reduce using rule 43 (exp)]
    EQ         [reduce using rule 43 (exp)]
    NEQ        [reduce using rule 43 (exp)]
    LT         [reduce using rule 43 (exp)]
    GT         [reduce using rule 43 (exp)]
    LTE        [reduce using rule 43 (exp)]
    GTE        [reduce using rule 43 (exp)]
    RIGHT      [reduce using rule 43 (exp)]
    LEFT       [reduce using rule 43 (exp)]
    $default   reduce using rule 43 (exp)


State 110

   31 exp: exp . ADD exp
   32    | exp . SUBSTRACT exp
   33    | exp . TIMES exp
   34    | exp . OVER exp
   36    | exp . AND exp
   37    | exp . OR exp
   38    | exp . EQ exp
   39    | exp . NEQ exp
   40    | exp . LT exp
   41    | exp . GT exp
   42    | exp . LTE exp
   43    | exp . GTE exp
   44    | exp . RIGHT exp
   44    | exp RIGHT exp .
   45    | exp . LEFT exp

    ADD        shift, and go to state 70
    SUBSTRACT  shift, and go to state 71
    TIMES      shift, and go to state 72
    OVER       shift, and go to state 73
    AND        shift, and go to state 74
    OR         shift, and go to state 75
    EQ         shift, and go to state 76
    NEQ        shift, and go to state 77
    LT         shift, and go to state 78
    GT         shift, and go to state 79
    LTE        shift, and go to state 80
    GTE        shift, and go to state 81
    RIGHT      shift, and go to state 82
    LEFT       shift, and go to state 83

    ADD        [reduce using rule 44 (exp)]
    SUBSTRACT  [reduce using rule 44 (exp)]
    TIMES      [reduce using rule 44 (exp)]
    OVER       [reduce using rule 44 (exp)]
    AND        [reduce using rule 44 (exp)]
    OR         [reduce using rule 44 (exp)]
    EQ         [reduce using rule 44 (exp)]
    NEQ        [reduce using rule 44 (exp)]
    LT         [reduce using rule 44 (exp)]
    GT         [reduce using rule 44 (exp)]
    LTE        [reduce using rule 44 (exp)]
    GTE        [reduce using rule 44 (exp)]
    RIGHT      [reduce using rule 44 (exp)]
    LEFT       [reduce using rule 44 (exp)]
    $default   reduce using rule 44 (exp)


State 111

   31 exp: exp . ADD exp
   32    | exp . SUBSTRACT exp
   33    | exp . TIMES exp
   34    | exp . OVER exp
   36    | exp . AND exp
   37    | exp . OR exp
   38    | exp . EQ exp
   39    | exp . NEQ exp
   40    | exp . LT exp
   41    | exp . GT exp
   42    | exp . LTE exp
   43    | exp . GTE exp
   44    | exp . RIGHT exp
   45    | exp . LEFT exp
   45    | exp LEFT exp .

    ADD        shift, and go to state 70
    SUBSTRACT  shift, and go to state 71
    TIMES      shift, and go to state 72
    OVER       shift, and go to state 73
    AND        shift, and go to state 74
    OR         shift, and go to state 75
    EQ         shift, and go to state 76
    NEQ        shift, and go to state 77
    LT         shift, and go to state 78
    GT         shift, and go to state 79
    LTE        shift, and go to state 80
    GTE        shift, and go to state 81
    RIGHT      shift, and go to state 82
    LEFT       shift, and go to state 83

    ADD        [reduce using rule 45 (exp)]
    SUBSTRACT  [reduce using rule 45 (exp)]
    TIMES      [reduce using rule 45 (exp)]
    OVER       [reduce using rule 45 (exp)]
    AND        [reduce using rule 45 (exp)]
    OR         [reduce using rule 45 (exp)]
    EQ         [reduce using rule 45 (exp)]
    NEQ        [reduce using rule 45 (exp)]
    LT         [reduce using rule 45 (exp)]
    GT         [reduce using rule 45 (exp)]
    LTE        [reduce using rule 45 (exp)]
    GTE        [reduce using rule 45 (exp)]
    RIGHT      [reduce using rule 45 (exp)]
    LEFT       [reduce using rule 45 (exp)]
    $default   reduce using rule 45 (exp)


State 112

   56 fnCallExpr: id '(' ')' .

    $default  reduce using rule 56 (fnCallExpr)


State 113

   57 fnCallExpr: id '(' actualList . ')'
   61 actualList: actualList . ',' exp

    ')'  shift, and go to state 122
    ','  shift, and go to state 118


State 114

   21 stmt: CIN id '[' exp . ']' ';'
   31 exp: exp . ADD exp
   32    | exp . SUBSTRACT exp
   33    | exp . TIMES exp
   34    | exp . OVER exp
   36    | exp . AND exp
   37    | exp . OR exp
   38    | exp . EQ exp
   39    | exp . NEQ exp
   40    | exp . LT exp
   41    | exp . GT exp
   42    | exp . LTE exp
   43    | exp . GTE exp
   44    | exp . RIGHT exp
   45    | exp . LEFT exp

    ADD        shift, and go to state 70
    SUBSTRACT  shift, and go to state 71
    TIMES      shift, and go to state 72
    OVER       shift, and go to state 73
    AND        shift, and go to state 74
    OR         shift, and go to state 75
    EQ         shift, and go to state 76
    NEQ        shift, and go to state 77
    LT         shift, and go to state 78
    GT         shift, and go to state 79
    LTE        shift, and go to state 80
    GTE        shift, and go to state 81
    RIGHT      shift, and go to state 82
    LEFT       shift, and go to state 83
    ']'        shift, and go to state 123


State 115

   23 stmt: subscriptExpr '=' exp ';' .

    $default  reduce using rule 23 (stmt)


State 116

   62 subscriptExpr: id '[' exp ']' .

    $default  reduce using rule 62 (subscriptExpr)


State 117

   59 fnCallStmt: id '(' actualList ')' .

    $default  reduce using rule 59 (fnCallStmt)


State 118

   61 actualList: actualList ',' . exp

    TRUE             shift, and go to state 45
    FALSE            shift, and go to state 46
    IDENTIFIER       shift, and go to state 9
    INTEGER_LITERAL  shift, and go to state 47
    STRING_LITERAL   shift, and go to state 48
    NOT              shift, and go to state 49
    '('              shift, and go to state 51
    '-'              shift, and go to state 52

    exp            go to state 124
    atom           go to state 54
    fnCallExpr     go to state 55
    subscriptExpr  go to state 56
    id             go to state 57


State 119

   24 stmt: id '=' exp ';' .

    $default  reduce using rule 24 (stmt)


State 120

   25 stmt: IF '(' exp ')' block .
   26     | IF '(' exp ')' block . ELSE block

    ELSE  shift, and go to state 125

    $default  reduce using rule 25 (stmt)


State 121

   27 stmt: WHILE '(' exp ')' block .

    $default  reduce using rule 27 (stmt)


State 122

   57 fnCallExpr: id '(' actualList ')' .

    $default  reduce using rule 57 (fnCallExpr)


State 123

   21 stmt: CIN id '[' exp ']' . ';'

    ';'  shift, and go to state 126


State 124

   31 exp: exp . ADD exp
   32    | exp . SUBSTRACT exp
   33    | exp . TIMES exp
   34    | exp . OVER exp
   36    | exp . AND exp
   37    | exp . OR exp
   38    | exp . EQ exp
   39    | exp . NEQ exp
   40    | exp . LT exp
   41    | exp . GT exp
   42    | exp . LTE exp
   43    | exp . GTE exp
   44    | exp . RIGHT exp
   45    | exp . LEFT exp
   61 actualList: actualList ',' exp .

    ADD        shift, and go to state 70
    SUBSTRACT  shift, and go to state 71
    TIMES      shift, and go to state 72
    OVER       shift, and go to state 73
    AND        shift, and go to state 74
    OR         shift, and go to state 75
    EQ         shift, and go to state 76
    NEQ        shift, and go to state 77
    LT         shift, and go to state 78
    GT         shift, and go to state 79
    LTE        shift, and go to state 80
    GTE        shift, and go to state 81
    RIGHT      shift, and go to state 82
    LEFT       shift, and go to state 83

    $default  reduce using rule 61 (actualList)


State 125

   26 stmt: IF '(' exp ')' block ELSE . block

    '{'  shift, and go to state 20

    block  go to state 127


State 126

   21 stmt: CIN id '[' exp ']' ';' .

    $default  reduce using rule 21 (stmt)


State 127

   26 stmt: IF '(' exp ')' block ELSE block .

    $default  reduce using rule 26 (stmt)
